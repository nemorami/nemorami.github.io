<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-10-24T10:06:09+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">NEMORAMI</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">ruby</title><link href="http://localhost:4000/2023/10/24/ruby.html" rel="alternate" type="text/html" title="ruby" /><published>2023-10-24T00:00:00+09:00</published><updated>2023-10-24T00:00:00+09:00</updated><id>http://localhost:4000/2023/10/24/ruby</id><content type="html" xml:base="http://localhost:4000/2023/10/24/ruby.html"><![CDATA[<h2 id="gem-bundle">gem bundle</h2>
<p>ㅇ gem update 시 gem 디렉토리 지정</p>
<ul>
  <li>BUNDLE_PATH  지정…</li>
  <li>? local과 system 구분어떻게 하는지…</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[gem bundle ㅇ gem update 시 gem 디렉토리 지정 BUNDLE_PATH 지정… ? local과 system 구분어떻게 하는지…]]></summary></entry><entry><title type="html">윈도우 c:\Users d 드라이브로 옮기기</title><link href="http://localhost:4000/2022/08/22/c-users-d.html" rel="alternate" type="text/html" title="윈도우 c:\Users d 드라이브로 옮기기" /><published>2022-08-22T00:00:00+09:00</published><updated>2022-08-22T00:00:00+09:00</updated><id>http://localhost:4000/2022/08/22/c-users-d</id><content type="html" xml:base="http://localhost:4000/2022/08/22/c-users-d.html"><![CDATA[<ol>
  <li>
    <p>윈도우 복구모드윈도우 시작메뉴 &gt; 설정 &gt; 업데이트 및 복구 &gt; 복구 &gt; 고급 시작 옵션 &gt; 다시 시작캡쳐 이미지 자세히 보기(참고용)</p>
  </li>
  <li>
    <p>명령 프롬프트 모드옵션 선택 &gt; 문제 해결 &gt; 고급 옵션 &gt; 명령 프롬프트 캡처 자료 자세히 보기 (참고용)</p>
  </li>
  <li>
    <p>C:\Users 와 D:\Users 의 접근 드라이브 명 확인(주의!!!)
복구모드에서는 평범하게 사용하던 C,D 드라이브 명이 다른 이름으로 바뀌어 표시될 수 있으므로 꼭 확인해서 메모해 두어야 합니다.</p>
  </li>
  <li>
    <p>Users 디렉토리 이동시키기
제일 중요한 단계입니다. 실수하면 로그인이 되지 않거나, 여러가지 문제로 윈도우를 다시 설치해야 할지도 모릅니다.
1) 3번 단계에서 확인한 드라이브 명을 정확하게 사용해야 합니다.
2) robocopy 명령어 옵션을 정확히 사용하세요.(/copyall : 모든 파일정보를 복사합니다. /E: 비어있는 디렉토리를 포함하여 하위디렉토리를 복사합니다. /PURGE : 원본에 없는 파일/디렉토리는 제외합니다. /xj : 연결지점을 제외합니다.)  
X:&gt; D:
D:&gt; robocopy /copyall /E /PURGE /xj Users E:\Users
※※ 3번 단계에서 실제 C / D 드라이브의 표시 이름을 확인 후 사용하세요. (실제 C:\ &gt; 표시 D:\ , 실제 D:\ &gt; 표시 E:\ )</p>
  </li>
</ol>

<p>4-1.기존 Users 디렉토리 삭제
4번 단계에서 에러가 발생하지 않았으면, 기존 Users 디렉토리를 삭제합니다.D:&gt; rmdir /S /Q Users</p>

<p>4-2. [임시방편] Users 디렉토리 삭제 실패시 디렉토리 이름을 변경한다.«자세히 보기»  삭제 성공시 필요없는 단계입니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>접기
기존 Users 디렉토리를 삭제하지 못하면 다음 단계로 진행할 수 없고, 심각한 상황을 맞이 할 수 있습니다.폴더 삭제는 추후에 처리하시면 됩니다.  D:&gt; rename Users Users-delete※※  Users  &gt;&gt;  Users-delete  로 변경함.※※ 3번 단계에서 실제 C 드라이브의 드라이브명을 확인 후 사용하세요. (실제 C:\ &gt; 표시 D:\)경험자 링크 (Daum 로그인 필요함) : 
</code></pre></div></div>

<p>5.Users 디렉토리 교차점 만들기
일종의 웜홀(Warm Hole)입니다. 여기 명령어에서는 실제 드라이브 명 (D:)을 사용합니다. D:&gt; mklink /J Users D:\Users
※※ 앞의 D:는 실제로는 C 드라이브이며 뒷쪽의 D:는 실제 D 드라이브입니다.
(</p>

<ol>
  <li>재부팅 후 컴퓨터 상태 확인하기D:&gt;exit </li>
  <li>재부팅 후 컴퓨터 환경 확인C:\Users 폴더와 D:\Users 폴더내 내용이 동일하게 보이는 것을 확인할 수 있습니다. ※※ 개인적으로 C:\Users 링크는 숨김 처리하고, C:\사용자 한글폴더를 생성 후 이 폴더 안에 D:\사용자 폴더(실제 : D:\Users) 바로가기를 만들어서 사용합니다.</li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[윈도우 복구모드윈도우 시작메뉴 &gt; 설정 &gt; 업데이트 및 복구 &gt; 복구 &gt; 고급 시작 옵션 &gt; 다시 시작캡쳐 이미지 자세히 보기(참고용)]]></summary></entry><entry><title type="html">pgadmin docker</title><link href="http://localhost:4000/2022/08/16/pgadmin-docker.html" rel="alternate" type="text/html" title="pgadmin docker" /><published>2022-08-16T00:00:00+09:00</published><updated>2022-08-16T00:00:00+09:00</updated><id>http://localhost:4000/2022/08/16/pgadmin-docker</id><content type="html" xml:base="http://localhost:4000/2022/08/16/pgadmin-docker.html"><![CDATA[<h2 id="pgadmin">pgadmin</h2>
<p>’’’’
sudo docker run –name pgadmin -p 5050:80 -v /var/lib/pgadmin:/var/lib/pgadmin  -e ‘PGADMIN_DEFAULT_EMAIL=email@no.com’ -e ‘PGADMIN_DEFAULT_PASSWORD=password’ -d dpage/pgadmin4
‘’’’</p>
<h2 id="agensgraph">agensgraph</h2>
<p>’’’’
docker run -d     –name agensgraph     -e POSTGRES_PASSWORD=agens -p 5400:5432 -v /var/local/agens:/var/lib/postgresql/data docker.io/bitnine/agensgraph 
‘’’’</p>]]></content><author><name></name></author><summary type="html"><![CDATA[pgadmin ’’’’ sudo docker run –name pgadmin -p 5050:80 -v /var/lib/pgadmin:/var/lib/pgadmin -e ‘PGADMIN_DEFAULT_EMAIL=email@no.com’ -e ‘PGADMIN_DEFAULT_PASSWORD=password’ -d dpage/pgadmin4 ‘’’’ agensgraph ’’’’ docker run -d –name agensgraph -e POSTGRES_PASSWORD=agens -p 5400:5432 -v /var/local/agens:/var/lib/postgresql/data docker.io/bitnine/agensgraph ‘’’’]]></summary></entry><entry><title type="html">Intellij</title><link href="http://localhost:4000/2022/04/29/intellij.html" rel="alternate" type="text/html" title="Intellij" /><published>2022-04-29T00:00:00+09:00</published><updated>2022-04-29T00:00:00+09:00</updated><id>http://localhost:4000/2022/04/29/intellij</id><content type="html" xml:base="http://localhost:4000/2022/04/29/intellij.html"><![CDATA[<p>DevTools는 코드가 변경될 때 자동으로 애플리케이션을 다시 시작시킨다. 즉, 소스를 변경할때 마다 프로젝트를 중지시키고 다시 시작 시킬 필요가 없다는 뜻이다.</p>

<p>인텔리제이(IntelliJ) 에서 사용방법</p>

<p>DevTools를 처음 스프링부트 프로젝트를 만들면서의존성을 지정할때 Spring Boot DevTools를 선택하면 아래처럼 pom.xml파일의 <dependency> 요소에 지정되어 있다.</dependency></p>

<p>Preferences - Advanced Settings - Compiler에서 Allow auto-make to start even if developed application is currently running을 체크해준다.</p>

<p>Perference에서 Compiler를 검색후 Compiler 설정창에서 Build project automatically 체크</p>

<p>위 설정을 완료하면 소스를 변경하고 애플리케이션을 수동으로 재시작할 필요없이 자동으로 재시작이 된다.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[DevTools는 코드가 변경될 때 자동으로 애플리케이션을 다시 시작시킨다. 즉, 소스를 변경할때 마다 프로젝트를 중지시키고 다시 시작 시킬 필요가 없다는 뜻이다.]]></summary></entry><entry><title type="html">Jupyter</title><link href="http://localhost:4000/2021/02/18/jupyter.html" rel="alternate" type="text/html" title="Jupyter" /><published>2021-02-18T00:00:00+09:00</published><updated>2021-02-18T00:00:00+09:00</updated><id>http://localhost:4000/2021/02/18/jupyter</id><content type="html" xml:base="http://localhost:4000/2021/02/18/jupyter.html"><![CDATA[<h2 id="kernel">kernel</h2>
<h3 id="octave">octave</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install octave_kernel
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>graphics_toolkit("gnuplot")
</code></pre></div></div>

<h3 id="crystal">crystal</h3>]]></content><author><name></name></author><summary type="html"><![CDATA[kernel octave pip install octave_kernel]]></summary></entry><entry><title type="html">VSCODE</title><link href="http://localhost:4000/2021/01/15/vscode.html" rel="alternate" type="text/html" title="VSCODE" /><published>2021-01-15T00:00:00+09:00</published><updated>2021-01-15T00:00:00+09:00</updated><id>http://localhost:4000/2021/01/15/vscode</id><content type="html" xml:base="http://localhost:4000/2021/01/15/vscode.html"><![CDATA[<h3 id="troubleshooting">troubleshooting</h3>
<ul>
  <li>
    <p>다음 메시지와 함께 로그인 실패시 The name org.freedesktop.secrets was not provided by any .service files 
 =&gt; pacman -S gnome-keyring libsecret</p>
  </li>
  <li>
    <p>jupyter kernel error.</p>
  </li>
</ul>

<p>You can solve that problem by inserting”enable-proposed-api”: [“ms-toolsai.jupyter”] in the start settings of vs code. So press CTRL+ALT+P -&gt; “Preference: Configure Runtime Arguments” then insert the upper line. After that restart vscode.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[troubleshooting 다음 메시지와 함께 로그인 실패시 The name org.freedesktop.secrets was not provided by any .service files =&gt; pacman -S gnome-keyring libsecret]]></summary></entry><entry><title type="html">NOVNC</title><link href="http://localhost:4000/2021/01/13/novnc.html" rel="alternate" type="text/html" title="NOVNC" /><published>2021-01-13T00:00:00+09:00</published><updated>2021-01-13T00:00:00+09:00</updated><id>http://localhost:4000/2021/01/13/novnc</id><content type="html" xml:base="http://localhost:4000/2021/01/13/novnc.html"><![CDATA[<h2 id="vnc-설정">vnc 설정</h2>
<p>/etc/systemd/system/xvnc.socket</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit]
Description=XVNC Server

[Socket]
ListenStream=5900
Accept=yes

[Install]
WantedBy=sockets.target
</code></pre></div></div>

<p>/etc/systemd/system/xvnc@.service</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit]
Description=XVNC Per-Connection Daemon

[Service]
ExecStart=-/usr/bin/Xvnc -inetd -localhost -query localhost -geometry 1920x1080 -once -SecurityTypes=None
User=nobody
StandardInput=socket
StandardError=syslog
</code></pre></div></div>
<h2 id="light-dm설정">light dm설정</h2>
<p>LightDM</p>

<p>Modify /etc/lightdm/lightdm.conf</p>

<p>Enable the XDMCP Server:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[XDMCPServer]
enabled=true
port=177
</code></pre></div></div>
<p>On a headless system, disable the automatic start of one seat so that LightDM can run in the background:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[LightDM]
start-default-seat=false
</code></pre></div></div>
<p>Then restart the LightDM:</p>

<p>systemctl restart lightdm</p>]]></content><author><name></name></author><summary type="html"><![CDATA[vnc 설정 /etc/systemd/system/xvnc.socket]]></summary></entry><entry><title type="html">Docker</title><link href="http://localhost:4000/2020/11/10/docker.html" rel="alternate" type="text/html" title="Docker" /><published>2020-11-10T00:00:00+09:00</published><updated>2020-11-10T00:00:00+09:00</updated><id>http://localhost:4000/2020/11/10/docker</id><content type="html" xml:base="http://localhost:4000/2020/11/10/docker.html"><![CDATA[<p><code class="language-plaintext highlighter-rouge">docker run -d -it --cap-add SYS_ADMIN --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro -p 6080:6080 gooroom /lib/systemd/systemd</code></p>]]></content><author><name></name></author><summary type="html"><![CDATA[docker run -d -it --cap-add SYS_ADMIN --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro -p 6080:6080 gooroom /lib/systemd/systemd]]></summary></entry><entry><title type="html">LINUX TIP</title><link href="http://localhost:4000/2020/10/07/linux-tip.html" rel="alternate" type="text/html" title="LINUX TIP" /><published>2020-10-07T00:00:00+09:00</published><updated>2020-10-07T00:00:00+09:00</updated><id>http://localhost:4000/2020/10/07/linux-tip</id><content type="html" xml:base="http://localhost:4000/2020/10/07/linux-tip.html"><![CDATA[<h1 id="wine-hwp-file-open">wine hwp file open</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Desktop Entry]
Name=한컴오피스 한글 2014
Exec=env WINEPREFIX="/home/nemorami/.wine32" wine C:\\\\Program\\ Files\\\\Hnc\\\\HOffice9\\\\Bin\\\\Hwp.exe z:%f
Type=Application
StartupNotify=true
Comment=한글 2014(으)로 빠르고 편리하게 워드프로세서 문서를 만듭니다.
Path=/home/nemorami/.wine32/dosdevices/c:/Program Files/Hnc/HOffice9/Bin/
Icon=BE08_Hwp.0
StartupWMClass=hwp.exe
</code></pre></div></div>
<h1 id="linux용-한글-2020">linux용 한글 2020</h1>
<ul>
  <li>dpkg -i –force-all han….</li>
  <li>입력기가 붙지 않을때: /opt/hnc/hoffice11/Bin/qt 디렉토리 삭제</li>
  <li>color-scheme 적용: /usr/share/color-schemes/ 아래 원하는 칼라 스키마 파일을 ~/.config/hwprc 파일로 복사</li>
  <li>style적용: /usr/share/applications/hoffice11-hwp.desktop 편집
Exec=/opt/hnchoffice11/Bin/hwp <strong>-style=Fusion</strong> %f</li>
</ul>

<h1 id="현재-os를-docker-image로-만들기">현재 OS를 docker image로 만들기</h1>
<ol>
  <li>현재 OS를 tar 파일로 묶음</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">tar --numeric-owner --exclude=/proc --exclude=/sys -cvf centos6-base.tar(이름 지정) / </code></p>

<p>` tar -cpzf backup.tar.gz –exclude=/backup.tar.gz –exclude=/proc –exclude=/tmp –exclude=/mnt –exclude=/dev –exclude=/sys /`</p>
<ol>
  <li>docker 서버로 tar 파일을 복사 후 docker에 import</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">cat centos6-base.tar | docker import - centos6-base(원하는 이미지 이름)</code></p>

<ol>
  <li>import 정상 확인</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">docker run -i -t centos6-base cat /etc/redhat-release </code>
 <code class="language-plaintext highlighter-rouge">$ cat backup.tar.gz | docker import - imageName:20190825</code>
<code class="language-plaintext highlighter-rouge">$ docker run -t -i imageName:20190825 /bin/bash</code></p>

<h1 id="kio-gdrive">kio-gdrive</h1>
<ol>
  <li>kio-gdrive rebuild
<code class="language-plaintext highlighter-rouge">pikaur -G kio-gdrive</code></li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[wine hwp file open [Desktop Entry] Name=한컴오피스 한글 2014 Exec=env WINEPREFIX="/home/nemorami/.wine32" wine C:\\\\Program\\ Files\\\\Hnc\\\\HOffice9\\\\Bin\\\\Hwp.exe z:%f Type=Application StartupNotify=true Comment=한글 2014(으)로 빠르고 편리하게 워드프로세서 문서를 만듭니다. Path=/home/nemorami/.wine32/dosdevices/c:/Program Files/Hnc/HOffice9/Bin/ Icon=BE08_Hwp.0 StartupWMClass=hwp.exe linux용 한글 2020 dpkg -i –force-all han…. 입력기가 붙지 않을때: /opt/hnc/hoffice11/Bin/qt 디렉토리 삭제 color-scheme 적용: /usr/share/color-schemes/ 아래 원하는 칼라 스키마 파일을 ~/.config/hwprc 파일로 복사 style적용: /usr/share/applications/hoffice11-hwp.desktop 편집 Exec=/opt/hnchoffice11/Bin/hwp -style=Fusion %f 현재 OS를 docker image로 만들기 현재 OS를 tar 파일로 묶음]]></summary></entry><entry><title type="html">Qt 개발환경</title><link href="http://localhost:4000/2020/10/04/qt.html" rel="alternate" type="text/html" title="Qt 개발환경" /><published>2020-10-04T00:00:00+09:00</published><updated>2020-10-04T00:00:00+09:00</updated><id>http://localhost:4000/2020/10/04/qt</id><content type="html" xml:base="http://localhost:4000/2020/10/04/qt.html"><![CDATA[<h1 id="for-unix-socket">for unix socket</h1>
<p>nc -lkU ~/.assistantfifo | assistant -enableRemoteControl</p>
<h1 id="tcp-socket">tcp socket</h1>
<p>nc -lp 8080| assistant -enableRemoteControl</p>

<p>Then, you can do</p>

<h1 id="for-unix-socket-1">for unix socket</h1>
<p>echo “activateKeyword QObject” | nc -U ~/.assistantfifo</p>
<h1 id="for-tcp-socket">for tcp socket</h1>
<p>echo “activateKeyword QList” | nc localhost 8080</p>

<h1 id="qtcreator에서-qdebug-출력이-안될때">qtcreator에서 qDebug() 출력이 안될때</h1>
<p>Qt creator &gt; Tools &gt; Options &gt; Kits, select your kit, find Environment, click change and add:</p>

<p><code class="language-plaintext highlighter-rouge">QT_ASSUME_STDERR_HAS_CONSOLE=1</code></p>]]></content><author><name></name></author><summary type="html"><![CDATA[for unix socket nc -lkU ~/.assistantfifo | assistant -enableRemoteControl tcp socket nc -lp 8080| assistant -enableRemoteControl]]></summary></entry></feed>