<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-29T18:03:42+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">NEMORAMI</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Intellij</title><link href="http://localhost:4000/2022/04/29/intellij.html" rel="alternate" type="text/html" title="Intellij" /><published>2022-04-29T00:00:00+09:00</published><updated>2022-04-29T00:00:00+09:00</updated><id>http://localhost:4000/2022/04/29/intellij</id><content type="html" xml:base="http://localhost:4000/2022/04/29/intellij.html"><![CDATA[<p>DevTools는 코드가 변경될 때 자동으로 애플리케이션을 다시 시작시킨다. 즉, 소스를 변경할때 마다 프로젝트를 중지시키고 다시 시작 시킬 필요가 없다는 뜻이다.</p>

<p>인텔리제이(IntelliJ) 에서 사용방법</p>

<p>DevTools를 처음 스프링부트 프로젝트를 만들면서의존성을 지정할때 Spring Boot DevTools를 선택하면 아래처럼 pom.xml파일의 <dependency> 요소에 지정되어 있다.</dependency></p>

<p>Preferences - Advanced Settings - Compiler에서 Allow auto-make to start even if developed application is currently running을 체크해준다.</p>

<p>Perference에서 Compiler를 검색후 Compiler 설정창에서 Build project automatically 체크</p>

<p>위 설정을 완료하면 소스를 변경하고 애플리케이션을 수동으로 재시작할 필요없이 자동으로 재시작이 된다.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[DevTools는 코드가 변경될 때 자동으로 애플리케이션을 다시 시작시킨다. 즉, 소스를 변경할때 마다 프로젝트를 중지시키고 다시 시작 시킬 필요가 없다는 뜻이다.]]></summary></entry><entry><title type="html">Jupyter</title><link href="http://localhost:4000/2021/02/18/jupyter.html" rel="alternate" type="text/html" title="Jupyter" /><published>2021-02-18T00:00:00+09:00</published><updated>2021-02-18T00:00:00+09:00</updated><id>http://localhost:4000/2021/02/18/jupyter</id><content type="html" xml:base="http://localhost:4000/2021/02/18/jupyter.html"><![CDATA[<h2 id="kernel">kernel</h2>
<h3 id="octave">octave</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install octave_kernel
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>graphics_toolkit("gnuplot")
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[kernel octave pip install octave_kernel]]></summary></entry><entry><title type="html">VSCODE</title><link href="http://localhost:4000/2021/01/15/vscode.html" rel="alternate" type="text/html" title="VSCODE" /><published>2021-01-15T00:00:00+09:00</published><updated>2021-01-15T00:00:00+09:00</updated><id>http://localhost:4000/2021/01/15/vscode</id><content type="html" xml:base="http://localhost:4000/2021/01/15/vscode.html"><![CDATA[<h3 id="troubleshooting">troubleshooting</h3>
<ul>
  <li>
    <p>다음 메시지와 함께 로그인 실패시 The name org.freedesktop.secrets was not provided by any .service files 
 =&gt; pacman -S gnome-keyring libsecret</p>
  </li>
  <li>
    <p>jupyter kernel error.</p>
  </li>
</ul>

<p>You can solve that problem by inserting”enable-proposed-api”: [“ms-toolsai.jupyter”] in the start settings of vs code. So press CTRL+ALT+P -&gt; “Preference: Configure Runtime Arguments” then insert the upper line. After that restart vscode.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[troubleshooting 다음 메시지와 함께 로그인 실패시 The name org.freedesktop.secrets was not provided by any .service files =&gt; pacman -S gnome-keyring libsecret]]></summary></entry><entry><title type="html">NOVNC</title><link href="http://localhost:4000/2021/01/13/novnc.html" rel="alternate" type="text/html" title="NOVNC" /><published>2021-01-13T00:00:00+09:00</published><updated>2021-01-13T00:00:00+09:00</updated><id>http://localhost:4000/2021/01/13/novnc</id><content type="html" xml:base="http://localhost:4000/2021/01/13/novnc.html"><![CDATA[<h2 id="vnc-설정">vnc 설정</h2>
<p>/etc/systemd/system/xvnc.socket</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit]
Description=XVNC Server

[Socket]
ListenStream=5900
Accept=yes

[Install]
WantedBy=sockets.target
</code></pre></div></div>

<p>/etc/systemd/system/xvnc@.service</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit]
Description=XVNC Per-Connection Daemon

[Service]
ExecStart=-/usr/bin/Xvnc -inetd -localhost -query localhost -geometry 1920x1080 -once -SecurityTypes=None
User=nobody
StandardInput=socket
StandardError=syslog
</code></pre></div></div>
<h2 id="light-dm설정">light dm설정</h2>
<p>LightDM</p>

<p>Modify /etc/lightdm/lightdm.conf</p>

<p>Enable the XDMCP Server:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[XDMCPServer]
enabled=true
port=177
</code></pre></div></div>
<p>On a headless system, disable the automatic start of one seat so that LightDM can run in the background:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[LightDM]
start-default-seat=false
</code></pre></div></div>
<p>Then restart the LightDM:</p>

<p>systemctl restart lightdm</p>]]></content><author><name></name></author><summary type="html"><![CDATA[vnc 설정 /etc/systemd/system/xvnc.socket]]></summary></entry><entry><title type="html">Docker</title><link href="http://localhost:4000/2020/11/10/docker.html" rel="alternate" type="text/html" title="Docker" /><published>2020-11-10T00:00:00+09:00</published><updated>2020-11-10T00:00:00+09:00</updated><id>http://localhost:4000/2020/11/10/docker</id><content type="html" xml:base="http://localhost:4000/2020/11/10/docker.html"><![CDATA[<p><code class="language-plaintext highlighter-rouge">docker run -d -it --cap-add SYS_ADMIN --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro -p 6080:6080 gooroom /lib/systemd/systemd</code></p>]]></content><author><name></name></author><summary type="html"><![CDATA[docker run -d -it --cap-add SYS_ADMIN --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro -p 6080:6080 gooroom /lib/systemd/systemd]]></summary></entry><entry><title type="html">LINUX TIP</title><link href="http://localhost:4000/2020/10/07/linux-tip.html" rel="alternate" type="text/html" title="LINUX TIP" /><published>2020-10-07T00:00:00+09:00</published><updated>2020-10-07T00:00:00+09:00</updated><id>http://localhost:4000/2020/10/07/linux-tip</id><content type="html" xml:base="http://localhost:4000/2020/10/07/linux-tip.html"><![CDATA[<h1 id="wine-hwp-file-open">wine hwp file open</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Desktop Entry]
Name=한컴오피스 한글 2014
Exec=env WINEPREFIX="/home/nemorami/.wine32" wine C:\\\\Program\\ Files\\\\Hnc\\\\HOffice9\\\\Bin\\\\Hwp.exe z:%f
Type=Application
StartupNotify=true
Comment=한글 2014(으)로 빠르고 편리하게 워드프로세서 문서를 만듭니다.
Path=/home/nemorami/.wine32/dosdevices/c:/Program Files/Hnc/HOffice9/Bin/
Icon=BE08_Hwp.0
StartupWMClass=hwp.exe
</code></pre></div></div>
<h1 id="linux용-한글-2020">linux용 한글 2020</h1>
<ul>
  <li>dpkg -i –force-all han….</li>
  <li>입력기가 붙지 않을때: /opt/hnc/hoffice11/Bin/qt 디렉토리 삭제</li>
  <li>color-scheme 적용: /usr/share/color-schemes/ 아래 원하는 칼라 스키마 파일을 ~/.config/hwprc 파일로 복사</li>
  <li>style적용: /usr/share/applications/hoffice11-hwp.desktop 편집
Exec=/opt/hnchoffice11/Bin/hwp <strong>-style=Fusion</strong> %f</li>
</ul>

<h1 id="현재-os를-docker-image로-만들기">현재 OS를 docker image로 만들기</h1>
<ol>
  <li>현재 OS를 tar 파일로 묶음</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">tar --numeric-owner --exclude=/proc --exclude=/sys -cvf centos6-base.tar(이름 지정) / </code></p>

<p>` tar -cpzf backup.tar.gz –exclude=/backup.tar.gz –exclude=/proc –exclude=/tmp –exclude=/mnt –exclude=/dev –exclude=/sys /`</p>
<ol>
  <li>docker 서버로 tar 파일을 복사 후 docker에 import</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">cat centos6-base.tar | docker import - centos6-base(원하는 이미지 이름)</code></p>

<ol>
  <li>import 정상 확인</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">docker run -i -t centos6-base cat /etc/redhat-release </code>
 <code class="language-plaintext highlighter-rouge">$ cat backup.tar.gz | docker import - imageName:20190825</code>
<code class="language-plaintext highlighter-rouge">$ docker run -t -i imageName:20190825 /bin/bash</code></p>

<h1 id="kio-gdrive">kio-gdrive</h1>
<ol>
  <li>kio-gdrive rebuild
<code class="language-plaintext highlighter-rouge">pikaur -G kio-gdrive</code></li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[wine hwp file open [Desktop Entry] Name=한컴오피스 한글 2014 Exec=env WINEPREFIX="/home/nemorami/.wine32" wine C:\\\\Program\\ Files\\\\Hnc\\\\HOffice9\\\\Bin\\\\Hwp.exe z:%f Type=Application StartupNotify=true Comment=한글 2014(으)로 빠르고 편리하게 워드프로세서 문서를 만듭니다. Path=/home/nemorami/.wine32/dosdevices/c:/Program Files/Hnc/HOffice9/Bin/ Icon=BE08_Hwp.0 StartupWMClass=hwp.exe linux용 한글 2020 dpkg -i –force-all han…. 입력기가 붙지 않을때: /opt/hnc/hoffice11/Bin/qt 디렉토리 삭제 color-scheme 적용: /usr/share/color-schemes/ 아래 원하는 칼라 스키마 파일을 ~/.config/hwprc 파일로 복사 style적용: /usr/share/applications/hoffice11-hwp.desktop 편집 Exec=/opt/hnchoffice11/Bin/hwp -style=Fusion %f 현재 OS를 docker image로 만들기 현재 OS를 tar 파일로 묶음]]></summary></entry><entry><title type="html">Qt 개발환경</title><link href="http://localhost:4000/2020/10/04/qt.html" rel="alternate" type="text/html" title="Qt 개발환경" /><published>2020-10-04T00:00:00+09:00</published><updated>2020-10-04T00:00:00+09:00</updated><id>http://localhost:4000/2020/10/04/qt</id><content type="html" xml:base="http://localhost:4000/2020/10/04/qt.html"><![CDATA[<h1 id="for-unix-socket">for unix socket</h1>
<p>nc -lkU ~/.assistantfifo | assistant -enableRemoteControl</p>
<h1 id="tcp-socket">tcp socket</h1>
<p>nc -lp 8080| assistant -enableRemoteControl</p>

<p>Then, you can do</p>

<h1 id="for-unix-socket-1">for unix socket</h1>
<p>echo “activateKeyword QObject” | nc -U ~/.assistantfifo</p>
<h1 id="for-tcp-socket">for tcp socket</h1>
<p>echo “activateKeyword QList” | nc localhost 8080</p>

<h1 id="qtcreator에서-qdebug-출력이-안될때">qtcreator에서 qDebug() 출력이 안될때</h1>
<p>Qt creator &gt; Tools &gt; Options &gt; Kits, select your kit, find Environment, click change and add:</p>

<p><code class="language-plaintext highlighter-rouge">QT_ASSUME_STDERR_HAS_CONSOLE=1</code></p>]]></content><author><name></name></author><summary type="html"><![CDATA[for unix socket nc -lkU ~/.assistantfifo | assistant -enableRemoteControl tcp socket nc -lp 8080| assistant -enableRemoteControl]]></summary></entry><entry><title type="html">Jenkins</title><link href="http://localhost:4000/2020/09/25/jenkins.html" rel="alternate" type="text/html" title="Jenkins" /><published>2020-09-25T00:00:00+09:00</published><updated>2020-09-25T00:00:00+09:00</updated><id>http://localhost:4000/2020/09/25/jenkins</id><content type="html" xml:base="http://localhost:4000/2020/09/25/jenkins.html"><![CDATA[<p>HTTP ERROR 403 No valid crumb was included in the request 에러 해결
Dashboard&gt;Jenkins관리&gt;보안설정&gt;jenkins global security settings &gt; CSRF Protection &gt; Enable proxy compatibility 체크</p>]]></content><author><name></name></author><summary type="html"><![CDATA[HTTP ERROR 403 No valid crumb was included in the request 에러 해결 Dashboard&gt;Jenkins관리&gt;보안설정&gt;jenkins global security settings &gt; CSRF Protection &gt; Enable proxy compatibility 체크]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2020/09/24/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-09-24T18:07:23+09:00</published><updated>2020-09-24T18:07:23+09:00</updated><id>http://localhost:4000/jekyll/update/2020/09/24/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/09/24/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>